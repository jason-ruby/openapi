{
  "openapi": "3.0.0",
  "info": {
    "title": "Notification Service",
    "description": "The notification service is a utility API built on the device mangement service to facilitate sending notifications to users. <a href='/docs/notification.proto'>Click here for the proto file.</a>",
    "contact": {},
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://{defaultHost}",
      "variables": {
        "defaultHost": {
          "default": "www.example.com/api/device"
        }
      }
    }
  ],
  "paths": {
    "/notifications": {
      "post": {
        "tags": ["NotificationService"],
        "summary": "NotificationService_CreateNotification",
        "description": "Send one or more notifications.\nPermission level: read-write",
        "operationId": "NotificationService_CreateNotification",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/devicemanagementCreateNotificationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/devicemanagementNotificationsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/notifications/bulk/{notifications.bulkNotificationId}": {
      "get": {
        "tags": ["NotificationService"],
        "summary": "NotificationService_GetNotifications",
        "description": "Get the status of all notifications in a bulk request.\nPermission level: read",
        "operationId": "NotificationService_GetNotifications",
        "parameters": [
          {
            "name": "notifications.bulkNotificationId",
            "in": "path",
            "description": "This field corresponds to the groupId",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notifications.scope",
            "in": "query",
            "description": "- ANY: DEFAULT - No particular scope.\n - NOTIFICATION: Scope for notification devices (web, android and IOS devices)\n - EMC: Scope for EMC ZDS devices (android)\n - RFIDREADER: Scope for RFID readers, supports read to cloud as well as phone home readers.\n - AUTOTEST: Scope for automated testing.\n - SAVANNA_AUTOMATION_1: Savanna specific scope for automation testing\n - SAVANNA_AUTOMATION_2: Savanna specific scope for automation testing",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/notifications.scope"
            }
          },
          {
            "name": "notifications.tenantId",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/devicemanagementNotificationsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": ["NotificationService"],
        "summary": "NotificationService_CancelNotifications",
        "description": "Cancel all pending notifications in a bulk request.\nPermission level: read-write",
        "operationId": "NotificationService_CancelNotifications",
        "parameters": [
          {
            "name": "notifications.bulkNotificationId",
            "in": "path",
            "description": "This field corresponds to the groupId",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notifications.scope",
            "in": "query",
            "description": "- ANY: DEFAULT - No particular scope.\n - NOTIFICATION: Scope for notification devices (web, android and IOS devices)\n - EMC: Scope for EMC ZDS devices (android)\n - RFIDREADER: Scope for RFID readers, supports read to cloud as well as phone home readers.\n - AUTOTEST: Scope for automated testing.\n - SAVANNA_AUTOMATION_1: Savanna specific scope for automation testing\n - SAVANNA_AUTOMATION_2: Savanna specific scope for automation testing",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/notifications.scope"
            }
          },
          {
            "name": "notifications.tenantId",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/devicemanagementNotificationsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/notifications/{notification.notificationId}": {
      "get": {
        "tags": ["NotificationService"],
        "summary": "NotificationService_GetNotification",
        "description": "Get status of a single notification.\nPermission level: read",
        "operationId": "NotificationService_GetNotification",
        "parameters": [
          {
            "name": "notification.notificationId",
            "in": "path",
            "description": "This field corresponds to the jobId",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notification.scope",
            "in": "query",
            "description": "- ANY: DEFAULT - No particular scope.\n - NOTIFICATION: Scope for notification devices (web, android and IOS devices)\n - EMC: Scope for EMC ZDS devices (android)\n - RFIDREADER: Scope for RFID readers, supports read to cloud as well as phone home readers.\n - AUTOTEST: Scope for automated testing.\n - SAVANNA_AUTOMATION_1: Savanna specific scope for automation testing\n - SAVANNA_AUTOMATION_2: Savanna specific scope for automation testing",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/notification.scope"
            }
          },
          {
            "name": "notification.tenantId",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/devicemanagementNotificationResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": ["NotificationService"],
        "summary": "NotificationService_CancelNotification",
        "description": "Cancel a single pending notification request.\nPermission level: read-write",
        "operationId": "NotificationService_CancelNotification",
        "parameters": [
          {
            "name": "notification.notificationId",
            "in": "path",
            "description": "This field corresponds to the jobId",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notification.scope",
            "in": "query",
            "description": "- ANY: DEFAULT - No particular scope.\n - NOTIFICATION: Scope for notification devices (web, android and IOS devices)\n - EMC: Scope for EMC ZDS devices (android)\n - RFIDREADER: Scope for RFID readers, supports read to cloud as well as phone home readers.\n - AUTOTEST: Scope for automated testing.\n - SAVANNA_AUTOMATION_1: Savanna specific scope for automation testing\n - SAVANNA_AUTOMATION_2: Savanna specific scope for automation testing",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/notification.scope"
            }
          },
          {
            "name": "notification.tenantId",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/devicemanagementNotificationResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/googlerpcStatus"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "components": {
    "schemas": {
      "Statusesofdevicemessages": {
        "title": "Statusesofdevicemessages",
        "enum": [
          "PENDING",
          "PROCESSING",
          "COMPLETED",
          "FAILED",
          "TIMEOUT",
          "OFFLINE_PENDING",
          "CANCELLED",
          "EXPIRED"
        ],
        "type": "string",
        "description": "- PENDING: Message has been sent and we are waiting for a response from the device\n - PROCESSING: Message is being processed and has not been sent yet\n - COMPLETED: Message was successfully sent and received by the device\n - FAILED: Message failed to be sent to the device\n - TIMEOUT: Message timed out trying to be sent to device (legacy status)\n - OFFLINE_PENDING: Device is offline and waiting for it to connect to send message (legacy status)\n - CANCELLED: User cancelled the message before it\n - EXPIRED: Device never received the message or came online before the timeout expiry for the message",
        "example": "PENDING"
      },
      "devicemanagementCreateNotificationRequest": {
        "title": "devicemanagementCreateNotificationRequest",
        "type": "object",
        "properties": {
          "scope": {
            "$ref": "#/components/schemas/Differentdeviceusecasesofthedevicemanagementservice"
          },
          "tenantId": {
            "type": "string",
            "description": "required field."
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "deviceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "applicationScope": {
            "type": "string",
            "description": "Users' application scope to retrieve notification preferences.\nrequired field."
          },
          "notificationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Typesofnotificationsthatcanbesent"
            },
            "description": "Will send the notification to all types if empty."
          },
          "notificationMessage": {
            "type": "string",
            "description": "required field. The notification payload."
          },
          "subject": {
            "type": "string",
            "description": "Email subject when type is EMAIL.\nNotification title when type is DEVICE or SMS.\nrequired field."
          },
          "fcmOptions": {
            "$ref": "#/components/schemas/devicemanagementFcmOptions"
          }
        }
      },
      "devicemanagementFcmOptions": {
        "title": "devicemanagementFcmOptions",
        "type": "object",
        "properties": {
          "timeToLive": {
            "type": "string"
          },
          "priority": {
            "$ref": "#/components/schemas/FCMspecificvaluesthatdeterminehowthemessageisreceivedbythedevice"
          },
          "isNotification": {
            "type": "boolean",
            "description": "Identifies if it is a notification or data type FCM message.\nCurrently always set true because only notifications should be created through notification.proto."
          }
        },
        "description": "This object is currently not used as these options were set by EMC devices."
      },
      "FCMspecificvaluesthatdeterminehowthemessageisreceivedbythedevice": {
        "title": "FCMspecificvaluesthatdeterminehowthemessageisreceivedbythedevice",
        "enum": ["HIGH", "NORMAL"],
        "type": "string",
        "description": "- HIGH: High sends it as a wakeup that will override doze mode\n - NORMAL: Normal will not wake a device out of doze mode",
        "example": "HIGH"
      },
      "devicemanagementNotification": {
        "title": "devicemanagementNotification",
        "type": "object",
        "properties": {
          "scope": {
            "$ref": "#/components/schemas/Differentdeviceusecasesofthedevicemanagementservice"
          },
          "tenantId": {
            "type": "string"
          },
          "notificationId": {
            "type": "string"
          }
        }
      },
      "devicemanagementNotificationResponse": {
        "title": "devicemanagementNotificationResponse",
        "type": "object",
        "properties": {
          "notificationId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "deviceId": {
            "type": "string"
          },
          "notificationType": {
            "$ref": "#/components/schemas/Typesofnotificationsthatcanbesent"
          },
          "status": {
            "$ref": "#/components/schemas/Statusesofdevicemessages"
          },
          "cause": {
            "type": "string"
          }
        }
      },
      "Typesofnotificationsthatcanbesent": {
        "title": "Typesofnotificationsthatcanbesent",
        "enum": ["UNKNOWN", "EMAIL", "SMS", "DEVICE"],
        "type": "string",
        "description": "- UNKNOWN: Default, sends no notification\n - EMAIL: Sends an email, only used for user-based notifications or for devices that have users associated with them.\n - SMS: Sends an SMS, only used for user-based notifications or for devices that have users associated with them.\n - DEVICE: Device notification via FCM, only used for device notifications or for users that have devices associated with them.",
        "example": "UNKNOWN"
      },
      "devicemanagementNotifications": {
        "title": "devicemanagementNotifications",
        "type": "object",
        "properties": {
          "scope": {
            "$ref": "#/components/schemas/Differentdeviceusecasesofthedevicemanagementservice"
          },
          "tenantId": {
            "type": "string"
          },
          "bulkNotificationId": {
            "type": "string"
          }
        }
      },
      "devicemanagementNotificationsResponse": {
        "title": "devicemanagementNotificationsResponse",
        "type": "object",
        "properties": {
          "bulkNotificationId": {
            "type": "string"
          },
          "notificationStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/devicemanagementNotificationResponse"
            },
            "description": ""
          }
        }
      },
      "Differentdeviceusecasesofthedevicemanagementservice": {
        "title": "Differentdeviceusecasesofthedevicemanagementservice",
        "enum": [
          "ANY",
          "NOTIFICATION",
          "EMC",
          "RFIDREADER",
          "AUTOTEST",
          "SAVANNA_AUTOMATION_1",
          "SAVANNA_AUTOMATION_2"
        ],
        "type": "string",
        "description": "- ANY: DEFAULT - No particular scope.\n - NOTIFICATION: Scope for notification devices (web, android and IOS devices)\n - EMC: Scope for EMC ZDS devices (android)\n - RFIDREADER: Scope for RFID readers, supports read to cloud as well as phone home readers.\n - AUTOTEST: Scope for automated testing.\n - SAVANNA_AUTOMATION_1: Savanna specific scope for automation testing\n - SAVANNA_AUTOMATION_2: Savanna specific scope for automation testing",
        "example": "ANY"
      },
      "googlerpcStatus": {
        "title": "googlerpcStatus",
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/protobufAny"
            },
            "description": ""
          }
        }
      },
      "protobufAny": {
        "title": "protobufAny",
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
          }
        },
        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := &pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
      },
      "notification.scope": {
        "title": "notification.scope",
        "enum": [
          "ANY",
          "NOTIFICATION",
          "EMC",
          "RFIDREADER",
          "AUTOTEST",
          "SAVANNA_AUTOMATION_1",
          "SAVANNA_AUTOMATION_2"
        ],
        "type": "string",
        "example": "ANY"
      },
      "notifications.scope": {
        "title": "notifications.scope",
        "enum": [
          "ANY",
          "NOTIFICATION",
          "EMC",
          "RFIDREADER",
          "AUTOTEST",
          "SAVANNA_AUTOMATION_1",
          "SAVANNA_AUTOMATION_2"
        ],
        "type": "string",
        "example": "ANY"
      }
    }
  },
  "tags": [
    {
      "name": "NotificationService"
    }
  ]
}
